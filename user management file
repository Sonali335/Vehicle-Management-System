

*User Registration & Role Assignment

-- Sequence for Customer IDs
CREATE SEQUENCE customer_seq START WITH 1 INCREMENT BY 1;

-- Sequence for Worker IDs
CREATE SEQUENCE worker_seq START WITH 1 INCREMENT BY 1;

-- Sequence for Admin IDs
CREATE SEQUENCE admin_seq START WITH 1 INCREMENT BY 1;

-- Sequence for Audit_log_id
CREATE SEQUENCE audit_log_seq START WITH 1 INCREMENT BY 1;

-- Sequence for vehicle id
CREATE SEQUENCE vehicle_seq START WITH 1 INCREMENT BY 1;

--user management
--registration of new user
CREATE OR REPLACE PROCEDURE register_new_user(
    p_first_name IN VARCHAR2,
    p_last_name IN VARCHAR2,
    p_email IN VARCHAR2,
    p_phone_number IN VARCHAR2,
    p_address IN VARCHAR2,
    p_password_hash IN VARCHAR2,
    p_status IN VARCHAR2 DEFAULT 'Active', -- Admins have a status field
    p_role_id IN NUMBER, -- Role of the user (Admin, Customer, Worker)
    p_username IN VARCHAR2 DEFAULT NULL, -- Only for Admin
    p_service_id IN NUMBER DEFAULT NULL -- Only for Worker
) AS
    v_new_user_id NUMBER;
BEGIN
    IF p_role_id = 2 THEN
        -- Register as a customer
        INSERT INTO customer (customer_id, first_name, last_name, email, phone_number, address, role_id, password_hash)
        VALUES (customer_seq.NEXTVAL, p_first_name, p_last_name, p_email, p_phone_number, p_address, p_role_id, p_password_hash);
        
        v_new_user_id := customer_seq.CURRVAL;

    ELSIF p_role_id = 1 THEN
        -- Register as an admin
        INSERT INTO admin (admin_id, username, password_hash, email, phone_number, status, role_id)
        VALUES (admin_seq.NEXTVAL, p_username, p_password_hash, p_email, p_phone_number, p_status, p_role_id);
        
        v_new_user_id := admin_seq.CURRVAL;

    ELSIF p_role_id = 3 THEN
        -- Register as a worker
        INSERT INTO worker (worker_id, first_name, last_name, email, phone_number, password_hash, service_id, role_id)
        VALUES (worker_seq.NEXTVAL, p_first_name, p_last_name, p_email, p_phone_number, p_password_hash, p_service_id, p_role_id);
        
        v_new_user_id := worker_seq.CURRVAL;
    END IF;

    -- Log the registration action into the audit log
    INSERT INTO audit_log (log_id, action_type, action_details, action_date, status, user_type, role_id)
    VALUES (audit_log_seq.NEXTVAL, 'Registration', 'User registered: ' || p_email, CURRENT_TIMESTAMP, 'Active', 
            CASE 
                WHEN p_role_id = 1 THEN 'Admin'
                WHEN p_role_id = 2 THEN 'Customer'
                WHEN p_role_id = 3 THEN 'Worker'
            END, p_role_id);

    COMMIT;
END;
/
select * from user_role;
SELECT * FROM CUSTOMER;
--FOR CUSTOMER
SET SERVEROUTPUT ON;
BEGIN
   register_new_user('Sonali','Ambani','sonali@gmail.com','123-123-4444','123 Panahill road','sonali123',NULL,2);
END;
/
select * from worker;
--FOR WORKER
SET SERVEROUTPUT ON;
BEGIN
   register_new_user('Ramneet','Kaur','ramneet@gmail.com','123-123-3333','123 gore road','ramneet123',NULL,3,NULL,2);
END;
/


--For login
CREATE OR REPLACE PROCEDURE login_a_user (
    p_email IN VARCHAR2,
    p_password_hash IN VARCHAR2
) AS
    v_role_id NUMBER;
BEGIN
    -- Customer Login Check
    BEGIN
        SELECT role_id INTO v_role_id
        FROM customer
        WHERE email = p_email AND password_hash = p_password_hash;

        INSERT INTO audit_log (log_id, action_type, action_details, action_date, status, user_type, role_id)
        VALUES (audit_log_seq.NEXTVAL, 'Login', 'Customer logged in: ' || p_email, CURRENT_TIMESTAMP, 'Success', 'Customer', v_role_id);
        COMMIT;
        RETURN;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            NULL;
    END;

    -- Admin Login Check
    BEGIN
        SELECT role_id INTO v_role_id
        FROM admin
        WHERE email = p_email AND password_hash = p_password_hash;

        INSERT INTO audit_log (log_id, action_type, action_details, action_date, status, user_type, role_id)
        VALUES (audit_log_seq.NEXTVAL, 'Login', 'Admin logged in: ' || p_email, CURRENT_TIMESTAMP, 'Success', 'Admin', v_role_id);
        COMMIT;
        RETURN;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            NULL;
    END;

    -- Worker Login Check
    BEGIN
        SELECT role_id INTO v_role_id
        FROM worker
        WHERE email = p_email AND password_hash = p_password_hash;

        INSERT INTO audit_log (log_id, action_type, action_details, action_date, status, user_type, role_id)
        VALUES (audit_log_seq.NEXTVAL, 'Login', 'Worker logged in: ' || p_email, CURRENT_TIMESTAMP, 'Success', 'Worker', v_role_id);
        COMMIT;
        RETURN;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            NULL;
    END;

    -- If no user matched, log failed attempt
    INSERT INTO audit_log (log_id, action_type, action_details, action_date, status, user_type, role_id)
    VALUES (audit_log_seq.NEXTVAL, 'Login', 'Failed login attempt for: ' || p_email, CURRENT_TIMESTAMP, 'Failed', 'Customer', NULL);
    COMMIT;
END;


SELECT * FROM WORKER;
SET SERVEROUTPUT ON;
BEGIN
  login_a_user('gur@gmail.com','gurpreet');
END;
/
SELECT * FROM CUSTOMER;
SET SERVEROUTPUT ON;
BEGIN
  login_a_user('kiran@gmail.com','my_password');
END;
/

--admin logged in 
SELECT * FROM ADMIN;
SET SERVEROUTPUT ON;
BEGIN
  login_a_user('admin@example.com','admin_1');
END;
/
--wrong user
SET SERVEROUTPUT ON;
BEGIN
  login_a_user('nidhi@gmail.com','nidhi');
END;
/
SELECT * FROM AUDIT_LOG;



--to delete a user
CREATE OR REPLACE PROCEDURE delete_user_account(
    p_user_id IN NUMBER,
    p_user_type IN VARCHAR2 -- 'Customer', 'Admin', 'Worker'
) AS
BEGIN
    IF p_user_type = 'Customer' THEN
        DELETE FROM customer WHERE customer_id = p_user_id;
    ELSIF p_user_type = 'Admin' THEN
        DELETE FROM admin WHERE admin_id = p_user_id;
    ELSIF p_user_type = 'Worker' THEN
        DELETE FROM worker WHERE worker_id = p_user_id;
    END IF;

    -- Log the delete action
    INSERT INTO audit_log (log_id, action_type, action_details, action_date, status, user_type, role_id)
    VALUES (audit_log_seq.NEXTVAL, 'Delete', p_user_type || ' account deleted: ' || p_user_id, CURRENT_TIMESTAMP, 'Active', p_user_type, NULL);

    COMMIT;
END;
/


--execution
SET SERVEROUTPUT ON;
BEGIN
    -- Example for deleting a customer
    delete_user_account(4,'Customer');
    -- Example for deleting a worker
    delete_user_account(5 ,'Worker');
END;
/
select * from customer;
select * from worker;



--to update user infrmation
CREATE OR REPLACE PROCEDURE update_user_info(
    p_user_id IN NUMBER,
    p_user_type IN VARCHAR2, -- 'Customer', 'Admin', 'Worker'
    p_first_name IN VARCHAR2,
    p_last_name IN VARCHAR2,
    p_email IN VARCHAR2,
    p_phone_number IN VARCHAR2,
    p_address IN VARCHAR2
) AS
BEGIN
    IF p_user_type = 'Customer' THEN
        UPDATE customer
        SET first_name = p_first_name, last_name = p_last_name, email = p_email, 
            phone_number = p_phone_number, address = p_address
        WHERE customer_id = p_user_id;
    ELSIF p_user_type = 'Admin' THEN
        UPDATE admin
        SET username = p_first_name || ' ' || p_last_name, email = p_email, 
            phone_number = p_phone_number
        WHERE admin_id = p_user_id;
    ELSIF p_user_type = 'Worker' THEN
        UPDATE worker
        SET first_name = p_first_name, last_name = p_last_name, email = p_email, 
            phone_number = p_phone_number
        WHERE worker_id = p_user_id;
    END IF;

    -- Log the update action
    INSERT INTO audit_log (log_id, action_type, action_details, action_date, status, user_type, role_id)
    VALUES (audit_log_seq.NEXTVAL, 'Update', p_user_type || ' info updated: ' || p_email, CURRENT_TIMESTAMP, 'Active', p_user_type, NULL);
    
    COMMIT;
END;
/
SELECT * FROM CUSTOMER;
SELECT * FROM WORKER;
--EXECUTION
BEGIN
    -- Example: Update a Customer's Info
    update_user_info(3,'Customer','Kiranjit','Kaur','kiranjit@gmail.com','888-888-8888','123 Main St');
    -- Example: Update a Worker's Info
    update_user_info(7,'Worker','Raman','Kaur','raman@gmail.com','555-123-4567','456 Worker Rd, Factory City');
END;
/









