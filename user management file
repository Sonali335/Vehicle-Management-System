

*User Registration & Role Assignment



-- Sequence for Customer IDs
CREATE SEQUENCE customer_seq START WITH 1 INCREMENT BY 1;

-- Sequence for Worker IDs
CREATE SEQUENCE worker_seq START WITH 1 INCREMENT BY 1;

-- Sequence for Admin IDs
CREATE SEQUENCE admin_seq START WITH 1 INCREMENT BY 1;


CREATE OR REPLACE PROCEDURE register_user(
    p_user_type    VARCHAR2,
    p_first_name   VARCHAR2,
    p_last_name    VARCHAR2,
    p_email        VARCHAR2,
    p_phone        VARCHAR2,
    p_password_raw VARCHAR2
) AS
    v_role_id NUMBER;
    v_user_id NUMBER;
BEGIN
    -- Assign Role ID based on the user type (Customer, Worker)
    SELECT role_id INTO v_role_id FROM user_role WHERE role_name = p_user_type;

    -- Insert into respective tables based on user type
    IF p_user_type = 'Customer' THEN
        INSERT INTO customer (customer_id, first_name, last_name, email, phone_number, password_hash, role_id)
        VALUES (customer_seq.NEXTVAL, p_first_name, p_last_name, p_email, p_phone, p_password_raw, v_role_id)
        RETURNING customer_id INTO v_user_id;

    ELSIF p_user_type = 'Worker' THEN
        INSERT INTO worker (worker_id, first_name, last_name, email, phone_number, password_hash, role_id)
        VALUES (worker_seq.NEXTVAL, p_first_name, p_last_name, p_email, p_phone, p_password_raw, v_role_id)
        RETURNING worker_id INTO v_user_id;
    END IF;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('User Registered Successfully with ID: ' || v_user_id);
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/
BEGIN 
    REGISTER_USER('Customer', 'Kiran', 'Kaur', 'kiran@gmail.com', '999999999', 'my_password'); 
END;
/
BEGIN 
    REGISTER_USER('Worker', 'Aamn', 'Kaur', 'aamn@gmail.com', '22222222', 'pass3'); 
END;
/

* User Login Process
CREATE OR REPLACE PROCEDURE login (
    p_email       VARCHAR2,
    p_password_raw VARCHAR2
) AS
    v_user_id NUMBER;
    v_user_type VARCHAR2(20);
    v_role_id NUMBER;
    v_count NUMBER;
    v_login_status VARCHAR2(10);
BEGIN
    -- Check Customer Login
    BEGIN
        SELECT customer_id, 'Customer', role_id
        INTO v_user_id, v_user_type, v_role_id
        FROM customer
        WHERE email = p_email AND password_hash = p_password_raw;
        
        v_count := 1; -- Customer found
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            v_count := 0; -- No customer found
    END;

    -- If Customer not found, check Worker Login
    IF v_count = 0 THEN
        BEGIN
            SELECT worker_id, 'Worker', role_id
            INTO v_user_id, v_user_type, v_role_id
            FROM worker
            WHERE email = p_email AND password_hash = p_password_raw;
            
            v_count := 1; -- Worker found
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                v_count := 0; -- No worker found
        END;
    END IF;

    -- If Worker not found, check Admin Login
    IF v_count = 0 THEN
        BEGIN
            SELECT admin_id, 'Admin', role_id
            INTO v_user_id, v_user_type, v_role_id
            FROM admin
            WHERE email = p_email AND password_hash = p_password_raw;
            
            v_count := 1; -- Admin found
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                v_count := 0; -- No admin found
        END;
    END IF;

    -- Determine login status
    IF v_count > 0 THEN
        v_login_status := 'SUCCESS';  -- Login successful
    ELSE
        v_login_status := 'FAILED';   -- Login failed
    END IF;

    -- Insert into audit_log table
    INSERT INTO audit_log (
        log_id,                -- Automatically generated log ID
        action_type,           -- Type of action (LOGIN or FAILED_LOGIN)
        action_details,        -- Detailed information about the action
        action_date,           -- Timestamp of the action
        status,                -- Status of the login (SUCCESS or FAILED)
        user_type,             -- Type of user (Customer, Worker, Admin)
        role_id                -- Role ID of the user
    )
    VALUES (
        audit_log_seq.NEXTVAL,  -- Generate new log ID from sequence
        CASE 
            WHEN v_login_status = 'SUCCESS' THEN 'LOGIN'
            ELSE 'FAILED_LOGIN'
        END,                     -- Determine action type based on login status
        'User ' || v_user_id || ' (' || v_user_type || ') attempted to log in',  -- Log the details (including user_id for reference)
        SYSDATE,                 -- Current timestamp for action date
        v_login_status,         -- Status (SUCCESS or FAILED)
        v_user_type,            -- User type (Customer, Worker, Admin)
        v_role_id               -- Role ID (user's role in the system)
    );

    -- Commit to save the login attempt in audit_log
    COMMIT;

    -- Output the result
    IF v_login_status = 'SUCCESS' THEN
        DBMS_OUTPUT.PUT_LINE('Login successful for user ID: ' || v_user_id);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Login failed for email: ' || p_email);
    END IF;
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        -- If no data is found for any of the user types, mark as failed login
        v_login_status := 'FAILED';
        
        -- Insert into audit_log table for failed login attempt
        INSERT INTO audit_log (
            log_id,
            action_type,
            action_details,
            action_date,
            status,
            user_type,
            role_id
        )
        VALUES (
            audit_log_seq.NEXTVAL,  -- Generate new log ID
            'FAILED_LOGIN',         -- Action type is failed login
            'User attempt to log in failed for email: ' || p_email,  -- Action details
            SYSDATE,                -- Current timestamp for action date
            v_login_status,         -- Status is FAILED
            'Unknown',              -- No user type
            NULL                    -- No role ID
        );

        -- Commit to save the failed login attempt in audit_log
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('No user found with the provided credentials.');
    WHEN OTHERS THEN
        -- Handle any other errors
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/








