

*User Registration & Role Assignment

-- Sequence for Customer IDs
CREATE SEQUENCE customer_seq START WITH 1 INCREMENT BY 1;

-- Sequence for Worker IDs
CREATE SEQUENCE worker_seq START WITH 1 INCREMENT BY 1;

-- Sequence for Admin IDs
CREATE SEQUENCE admin_seq START WITH 1 INCREMENT BY 1;

-- Sequence for Audit_log_id
CREATE SEQUENCE audit_log_seq START WITH 1 INCREMENT BY 1;

-- Sequence for vehicle id
CREATE SEQUENCE vehicle_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE PROCEDURE register_user(
    p_user_type    VARCHAR2,
    p_first_name   VARCHAR2,
    p_last_name    VARCHAR2,
    p_email        VARCHAR2,
    p_phone        VARCHAR2,
    p_password_raw VARCHAR2
) AS
    v_role_id NUMBER;
    v_user_id NUMBER;
BEGIN
    -- Assign Role ID based on the user type (Customer, Worker)
    SELECT role_id INTO v_role_id FROM user_role WHERE role_name = p_user_type;

    -- Insert into respective tables based on user type
    IF p_user_type = 'Customer' THEN
        INSERT INTO customer (customer_id, first_name, last_name, email, phone_number, password_hash, role_id)
        VALUES (customer_seq.NEXTVAL, p_first_name, p_last_name, p_email, p_phone, p_password_raw, v_role_id)
        RETURNING customer_id INTO v_user_id;

    ELSIF p_user_type = 'Worker' THEN
        INSERT INTO worker (worker_id, first_name, last_name, email, phone_number, password_hash, role_id)
        VALUES (worker_seq.NEXTVAL, p_first_name, p_last_name, p_email, p_phone, p_password_raw, v_role_id)
        RETURNING worker_id INTO v_user_id;
    END IF;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('User Registered Successfully with ID: ' || v_user_id);
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/
BEGIN 
    REGISTER_USER('Customer', 'Kiran', 'Kaur', 'kiran@gmail.com', '999999999', 'my_password'); 
END;
/
BEGIN 
    REGISTER_USER('Worker', 'Aamn', 'Kaur', 'aamn@gmail.com', '22222222', 'pass3'); 
END;
/




* login and appointments
CREATE OR REPLACE PROCEDURE user_login_and_select_service (
    p_username VARCHAR2,
    p_password_raw VARCHAR2,
    p_role_name VARCHAR2,
    p_service_id NUMBER -- Input service ID
) AS
    v_user_id NUMBER;
    v_role_id NUMBER;
    v_count NUMBER;
    v_error_message VARCHAR2(255);
    v_action_status VARCHAR2(10);
    v_login_time TIMESTAMP := SYSTIMESTAMP;
    v_service_exists NUMBER;
    v_vehicle_id NUMBER;
    v_appointment_id NUMBER;
    v_worker_id NUMBER;  -- New variable to store worker ID
BEGIN
    -- Get the role ID
    SELECT role_id INTO v_role_id FROM user_role WHERE role_name = p_role_name;

    IF p_role_name = 'Customer' THEN
        -- First, check if user exists
        SELECT COUNT(*) INTO v_count
        FROM customer
        WHERE (email = p_username OR customer_id = TO_NUMBER(p_username,'9999999999')) 
        AND password_hash = p_password_raw;

        -- If user exists, fetch the customer ID
        IF v_count > 0 THEN
            SELECT customer_id INTO v_user_id
            FROM customer
            WHERE (email = p_username OR customer_id = TO_NUMBER(p_username,'9999999999')) 
            AND password_hash = p_password_raw;
            
            v_error_message := 'Customer login successful.';
            v_action_status := 'Success';
            DBMS_OUTPUT.PUT_LINE(v_error_message);
        ELSE
            v_error_message := 'Invalid Customer credentials.';
            v_action_status := 'Failed';
            DBMS_OUTPUT.PUT_LINE(v_error_message);
            RETURN; -- Exit if login fails
        END IF;

        -- Check if service exists
        SELECT COUNT(*) INTO v_service_exists FROM service WHERE service_id = p_service_id;

        IF v_service_exists = 0 THEN
            DBMS_OUTPUT.PUT_LINE('Service ID ' || p_service_id || ' does not exist.');
            RETURN;
        END IF;

        -- Assuming the customer has a vehicle (fetch the first one)
        SELECT vehicle_id INTO v_vehicle_id
        FROM vehicle
        WHERE customer_id = v_user_id
        AND ROWNUM = 1;

        -- Find an available worker for the selected service
        SELECT worker_id INTO v_worker_id
        FROM worker
        WHERE service_id = p_service_id
        AND ROWNUM = 1;  -- Pick the first available worker (you can change this logic)

        -- Create an appointment
        SELECT NVL(MAX(appointment_id), 0) + 1 INTO v_appointment_id FROM appointment;
        
        INSERT INTO appointment (appointment_id, customer_id, vehicle_id, service_id, worker_id, appointment_date, status)
        VALUES (v_appointment_id, v_user_id, v_vehicle_id, p_service_id, v_worker_id, SYSTIMESTAMP, 'Scheduled');

        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Appointment created successfully. Appointment ID: ' || v_appointment_id || ' Assigned Worker ID: ' || v_worker_id);

    ELSIF p_role_name = 'Worker' THEN
        -- First, check if worker exists
        SELECT COUNT(*) INTO v_count
        FROM worker
        WHERE (email = p_username OR worker_id = TO_NUMBER(p_username,'9999999999')) 
        AND password_hash = p_password_raw;

        -- If worker exists, fetch the worker ID
        IF v_count > 0 THEN
            SELECT worker_id INTO v_user_id
            FROM worker
            WHERE (email = p_username OR worker_id = TO_NUMBER(p_username,'9999999999')) 
            AND password_hash = p_password_raw;
            
            v_error_message := 'Worker login successful.';
            v_action_status := 'Success';
            DBMS_OUTPUT.PUT_LINE(v_error_message);
        ELSE
            v_error_message := 'Invalid Worker credentials.';
            v_action_status := 'Failed';
            DBMS_OUTPUT.PUT_LINE(v_error_message);
            RETURN;
        END IF;

    ELSIF p_role_name = 'Admin' THEN
        -- First, check if admin exists
        SELECT COUNT(*) INTO v_count
        FROM admin
        WHERE (username = p_username OR email = p_username) 
        AND password_hash = p_password_raw;

        -- If admin exists, fetch the admin ID
        IF v_count > 0 THEN
            SELECT admin_id INTO v_user_id
            FROM admin
            WHERE (username = p_username OR email = p_username) 
            AND password_hash = p_password_raw;
            
            v_error_message := 'Admin login successful.';
            v_action_status := 'Success';
            DBMS_OUTPUT.PUT_LINE(v_error_message);
        ELSE
            v_error_message := 'Invalid Admin credentials.';
            v_action_status := 'Failed';
            DBMS_OUTPUT.PUT_LINE(v_error_message);
            RETURN;
        END IF;

    ELSE
        v_error_message := 'Invalid role provided.';
        v_action_status := 'Failed';
        DBMS_OUTPUT.PUT_LINE(v_error_message);
        RETURN;
    END IF;

    -- Log the login attempt
    BEGIN
        INSERT INTO audit_log (log_id, action_type, action_details, status, user_type, role_id)
        VALUES (v_user_id, 'Login and Service Selection', v_error_message, v_action_status, p_role_name, v_role_id);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error logging login attempt: ' || SQLERRM);
    END;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Role, vehicle, or worker not found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/
set serveroutput on;
BEGIN
  user_login_and_select_service('kiran@gmail.com', 'my_password', 'Customer', 3);
END;
/
set serveroutput on;
BEGIN
  user_login_and_select_service('sarahc@email.com', 'work_2', 'Worker',Â NULL);
END;
/









