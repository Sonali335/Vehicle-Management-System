-- Procedure to schedule a service appointment
--Book an appointment
CREATE OR REPLACE PROCEDURE book_appointment(
    p_customer_id IN NUMBER,
    p_vehicle_id IN NUMBER,
    p_service_id IN NUMBER,
    p_appointment_date IN TIMESTAMP,
    p_worker_id IN NUMBER
) AS
    v_appointment_exists NUMBER;
    v_worker_available NUMBER;
BEGIN
    -- Check if the customer has a valid vehicle
    SELECT COUNT(*) INTO v_appointment_exists
    FROM vehicle
    WHERE vehicle_id = p_vehicle_id AND customer_id = p_customer_id;

    IF v_appointment_exists = 0 THEN
        -- If no matching vehicle found for the customer
        RAISE_APPLICATION_ERROR(-20001, 'No vehicle found for the customer.');
    END IF;

    -- Check if the worker is already booked at the requested time
    SELECT COUNT(*) INTO v_worker_available
    FROM appointment
    WHERE worker_id = p_worker_id
      AND appointment_date = p_appointment_date
      AND status = 'Scheduled';  -- Only check for appointments with 'Scheduled' status

    IF v_worker_available > 0 THEN
        -- If worker is already booked at the requested time
        RAISE_APPLICATION_ERROR(-20002, 'Worker is not available at the requested time.');
    END IF;

    -- Insert the appointment into the appointment table
    INSERT INTO appointment (
        appointment_id, customer_id, vehicle_id, service_id, 
        appointment_date, status, worker_id
    ) 
    VALUES (
        appointment_seq.NEXTVAL, p_customer_id, p_vehicle_id, p_service_id, 
        p_appointment_date, 'Scheduled', p_worker_id
    );

    -- Log the appointment booking in the audit_log table
    INSERT INTO audit_log (
        log_id, action_type, action_details, action_date, 
        status, user_type, role_id
    )
    VALUES (
        audit_log_seq.NEXTVAL, 'Appointment Booking', 
        'Customer ' || p_customer_id || ' booked an appointment for vehicle ' || p_vehicle_id, 
        CURRENT_TIMESTAMP, 'Success', 'Customer', NULL
    );

    COMMIT;
END;
/


--execution
BEGIN
    book_appointment(3, 3, 3,TO_TIMESTAMP('2025-04-15 10:00:00', 'YYYY-MM-DD HH24:MI:SS'), 2 );
END;
/
--worker not vaialble
BEGIN
    book_appointment(2, 2, 3,TO_TIMESTAMP('2025-04-15 10:00:00', 'YYYY-MM-DD HH24:MI:SS'), 2 );
END;
/




-- Function to get the status of a specific service appointment
CREATE OR REPLACE FUNCTION get_appointment_status(
    p_appointment_id NUMBER
) RETURN VARCHAR2 AS
    v_status VARCHAR2(50);
BEGIN
    -- Retrieve the status of the given appointment
    SELECT status INTO v_status
    FROM appointment
    WHERE appointment_id = p_appointment_id;
    
    RETURN v_status;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Appointment not found';
    WHEN OTHERS THEN
        RETURN 'Error occurred while retrieving status';
END;
/

--execution
DECLARE
    v_status VARCHAR2(50);
BEGIN
    -- Call the function to get the status of appointment with ID 1
    v_status := get_appointment_status(1);
    -- Output the status
    DBMS_OUTPUT.PUT_LINE('Appointment Status: ' || v_status);
END;
/
--appointment not existing
DECLARE
    v_status VARCHAR2(50);
BEGIN
    -- Call the function to get the status of appointment with ID 101 (not existing)
    v_status := get_appointment_status(101);
    -- Output the status
    DBMS_OUTPUT.PUT_LINE('Appointment Status: ' || v_status);
END;
/


-- Procedure to mark a service appointment as completed
CREATE OR REPLACE PROCEDURE complete_service_appointment(
    p_appointment_id NUMBER
) AS
BEGIN
    -- Check if the appointment exists and is in 'In Progress' status
    UPDATE appointment
    SET status = 'Completed'
    WHERE appointment_id = p_appointment_id
    AND status = 'In Progress';
    
    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Service appointment completed successfully.');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error completing the appointment: ' || SQLERRM);
END;
/

--execution
set serveroutput on;
BEGIN
    -- Example: Mark the service appointment with ID 1 as completed
    complete_service_appointment(2);
END;
/
