-- Procedure to schedule a service appointment
CREATE OR REPLACE PROCEDURE schedule_appointment(
    p_customer_id NUMBER,
    p_vehicle_id NUMBER,
    p_service_id NUMBER,
    p_appointment_date TIMESTAMP,
    p_worker_id NUMBER
) AS
    v_appointment_id NUMBER;
BEGIN
    -- Check if the worker is available at the desired time
    DECLARE
        v_count NUMBER;
    BEGIN
        SELECT COUNT(*) INTO v_count
        FROM appointment
        WHERE worker_id = p_worker_id
        AND appointment_date = p_appointment_date
        AND status != 'Completed'; -- Ensure the worker is not already booked
        IF v_count > 0 THEN
            RAISE_APPLICATION_ERROR(-20001, 'Worker is already booked for the selected time.');
        END IF;
    END;
    
    -- Insert the appointment details into the appointment table
    INSERT INTO appointment (appointment_id, customer_id, vehicle_id, service_id, appointment_date, status, worker_id)
    VALUES (appointment_seq.NEXTVAL, p_customer_id, p_vehicle_id, p_service_id, p_appointment_date, 'Scheduled', p_worker_id);
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Appointment scheduled successfully.');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error scheduling appointment: ' || SQLERRM);
END;
/

-- Procedure to assign service tasks to workers (mechanics)
CREATE OR REPLACE PROCEDURE assign_service_task(
    p_appointment_id NUMBER,
    p_worker_id NUMBER
) AS
    v_status VARCHAR2(50);
BEGIN
    -- Check if the appointment exists and its status is 'Scheduled'
    SELECT status INTO v_status
    FROM appointment
    WHERE appointment_id = p_appointment_id;
    
    IF v_status != 'Scheduled' THEN
        RAISE_APPLICATION_ERROR(-20002, 'Appointment has already been processed or is not in the scheduled state.');
    END IF;
    
    -- Update the appointment to assign the worker (mechanic)
    UPDATE appointment
    SET worker_id = p_worker_id
    WHERE appointment_id = p_appointment_id;
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Worker assigned successfully to the appointment.');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error assigning worker: ' || SQLERRM);
END;
/


-- Function to get the status of a specific service appointment
CREATE OR REPLACE FUNCTION get_appointment_status(
    p_appointment_id NUMBER
) RETURN VARCHAR2 AS
    v_status VARCHAR2(50);
BEGIN
    -- Retrieve the status of the given appointment
    SELECT status INTO v_status
    FROM appointment
    WHERE appointment_id = p_appointment_id;
    
    RETURN v_status;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Appointment not found';
    WHEN OTHERS THEN
        RETURN 'Error occurred while retrieving status';
END;
/


-- Procedure to mark a service appointment as completed
CREATE OR REPLACE PROCEDURE complete_service_appointment(
    p_appointment_id NUMBER
) AS
BEGIN
    -- Check if the appointment exists and is in 'In Progress' status
    UPDATE appointment
    SET status = 'Completed'
    WHERE appointment_id = p_appointment_id
    AND status = 'In Progress';
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Service appointment completed successfully.');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error completing the appointment: ' || SQLERRM);
END;
/
